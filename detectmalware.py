import psutil
import hashlib
import pandas as pd
import joblib

def extract_system_data():
    try:
        process = psutil.Process()
        
        status = process.status() if hasattr(process, 'status') else None
        
        cpu_times = process.cpu_times() if hasattr(process, 'cpu_times') else None
        usage_counter = cpu_times.user if cpu_times else None
        
        nice = process.nice() if hasattr(process, 'nice') else None
        
        try:
            ionice = process.ionice()
            priority_class = ionice.ioclass if ionice else None
        except AttributeError:
            priority_class = None
        
        memory_info = process.memory_info() if hasattr(process, 'memory_info') else None
        if memory_info:
            vm_pgoff = getattr(memory_info, 'pageins', None)
            vm_truncate_count = getattr(memory_info, 'data', None)
            task_size = memory_info.rss
            cached_hole_size = getattr(memory_info, 'shared', None)
            free_area_cache = getattr(memory_info, 'shared', None)
            mm_users = getattr(memory_info, 'shared', None)
            map_count = getattr(memory_info, 'shared', None)
            hiwater_rss = memory_info.rss
            total_vm = memory_info.vms
            shared_vm = getattr(memory_info, 'shared', None)
            exec_vm = getattr(memory_info, 'vms', None)
            reserved_vm = getattr(memory_info, 'vms', None)
            nr_ptes = getattr(memory_info, 'vms', None)
            end_data = getattr(memory_info, 'vms', None)
            last_interval = getattr(memory_info, 'vms', None)
            nvcsw = getattr(memory_info, 'vms', None)
            nivcsw = getattr(memory_info, 'vms', None)
            min_flt = getattr(memory_info, 'vms', None)
            maj_flt = getattr(memory_info, 'vms', None)
            fs_excl_counter = getattr(memory_info, 'vms', None)
            lock = getattr(memory_info, 'vms', None)
            utime = getattr(memory_info, 'vms', None)
            stime = getattr(memory_info, 'vms', None)
            gtime = getattr(memory_info, 'vms', None)
            cgtime = getattr(memory_info, 'vms', None)
            signal_nvcsw = getattr(memory_info, 'vms', None)
        else:
            vm_pgoff = vm_truncate_count = task_size = cached_hole_size = free_area_cache = mm_users = map_count = hiwater_rss = total_vm = shared_vm = exec_vm = reserved_vm = nr_ptes = end_data = last_interval = nvcsw = nivcsw = min_flt = maj_flt = fs_excl_counter = lock = utime = stime = gtime = cgtime = signal_nvcsw = None

        system_data = {
            "hash": hashlib.sha256(str(process.pid).encode()).hexdigest(),
            "millisecond": 0,
            "classification": "unknown",
            "state": status,
            "usage_counter": usage_counter,
            "prio": nice,
            "static_prio": nice,
            "normal_prio": nice,
            "policy": priority_class,
            "vm_pgoff": vm_pgoff,
            "vm_truncate_count": vm_truncate_count,
            "task_size": task_size,
            "cached_hole_size": cached_hole_size,
            "free_area_cache": free_area_cache,
            "mm_users": mm_users,
            "map_count": map_count,
            "hiwater_rss": hiwater_rss,
            "total_vm": total_vm,
            "shared_vm": shared_vm,
            "exec_vm": exec_vm,
            "reserved_vm": reserved_vm,
            "nr_ptes": nr_ptes,
            "end_data": end_data,
            "last_interval": last_interval,
            "nvcsw": nvcsw,
            "nivcsw": nivcsw,
            "min_flt": min_flt,
            "maj_flt": maj_flt,
            "fs_excl_counter": fs_excl_counter,
            "lock": lock,
            "utime": utime,
            "stime": stime,
            "gtime": gtime,
            "cgtime": cgtime,
            "signal_nvcsw": signal_nvcsw
        }
        return pd.DataFrame([system_data])
    except Exception as e:
        print("Error occurred while extracting system data:", e)
        return pd.DataFrame()

def detect_malware(model, system_data):
    try:
        if "millisecond" not in system_data.columns:
            system_data["millisecond"] = 0
        
        # Data preprocessing
        system_data = system_data.apply(pd.to_numeric, errors='coerce')
        system_data.fillna(0, inplace=True)
        
        features = system_data.drop(columns=["hash", "classification"])
        prediction = model.predict(features)
        return prediction[0]
    except Exception as e:
        print("Error occurred while detecting malware:", e)
        return "unknown"

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()

def main():
    try:
        model = joblib.load("trained_model.pkl")
        system_data = extract_system_data()
        if not system_data.empty:
            result = detect_malware(model, system_data)
            print("Malware Detection Result:", result)
            if result == "benign":
                input("Press Enter to exit...")
        else:
            print("No system data available.")
    except Exception as e:
        print("Error occurred in main:", e)

if __name__ == "__main__":
    main()
